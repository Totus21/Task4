package com.epam.natasha_mishuk.voucher_factory;

import com.epam.natasha_mishuk.available_option.VoucherType;
import com.epam.natasha_mishuk.voucher.Voucher;
import com.epam.natasha_mishuk.voucher_exception.ProposalByTypeCreationException;
import com.epam.natasha_mishuk.voucher_exception.ProposalCreationException;
import com.epam.natasha_mishuk.voucher_util.FileParameter;
import com.epam.natasha_mishuk.voucher_util.FileUtil;
import com.epam.natasha_mishuk.voucher_validator.ProposalValidator;
import com.epam.natasha_mishuk.voucher_exception.VoucherCreationException;

import java.util.*;

import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;


public class ProposalCreator {
    Logger logger = LogManager.getLogger("ProposalCreator");


    public List<String> readVoucherInitializingOptionsList(VoucherType voucherType, String fileName) {
        logger.log(Level.INFO, "ProposalCreator.readVoucherInitializingOptionsList-> called for voucher[" + voucherType.name() + "] with file [" + fileName + "]");
        FileUtil objectReadFile = new FileUtil();
        logger.log(Level.INFO, "ProposalCreator.readVoucherInitializingOptionsList-> objectReadFile of FileUtil class is successfully created ");
        FileParameter objectFile = new FileParameter();
        logger.log(Level.INFO, "ProposalCreator.readVoucherInitializingOptionsList-> objectFile of FileParameter class is successfully created ");
        objectFile.setFileName(fileName);
        logger.log(Level.INFO, "ProposalCreator.readVoucherInitializingOptionsList-> objectFile successfully set file name to [ " + fileName + "]");

        return objectReadFile.readVoucherInitialParametersFromFile(objectFile);

    }


    public List<Voucher> generateProposalByType(VoucherType voucherType, String fileName) throws ProposalByTypeCreationException {
        logger.log(Level.INFO, "ProposalCreator.generateProposalByType-> called for voucher[" + voucherType.name() + "] with file [" + fileName + "]");

        List<String> voucherInitialOptionList = readVoucherInitializingOptionsList(voucherType, fileName);
        logger.log(Level.INFO, "ProposalCreator.generateProposalByType-> voucherInitialOptionList is successfully read  for voucher[" + voucherType.name() + "] from file [" + fileName + "]");

        Set<Voucher> voucherSet = new HashSet<>();
        VoucherCreator voucherCreator = new VoucherCreator();
        ProposalValidator proposalValidator = new ProposalValidator();
        Voucher voucher = null;

        for (String obj : voucherInitialOptionList) {
            try {
                voucher = voucherCreator.generateVoucher(voucherType, obj);
                logger.log(Level.INFO, "ProposalCreator.generateProposalByType-> voucher[" + voucherType.name() + "] is successfully generated by VoucherCreator.generateVoucher from fil[" + fileName + "]. Object:" + voucher.toString());

                voucherSet.add(voucher);
                logger.log(Level.INFO, "ProposalCreator.generateProposalByType-> voucher[" + voucherType.name() + "]:" + voucher.toString() + " is successfully added to voucher proposal");

            } catch (VoucherCreationException e) {
                logger.log(Level.WARN, "ProposalCreator.generateProposalByType-> catch VoucherCreationException for voucher[" + voucherType.name() + "] with next initial options" + obj.toString() + ".", e.getCause());

            }

        }
        if (proposalValidator.validateIfVoucherProposalEmpty(new ArrayList<Voucher>(voucherSet))) {
            logger.log(Level.WARN, "ProposalCreator.generateProposalByType-> trows ProposalByTypeCreationException for voucher[" + voucherType.name() + "] from file [" + fileName + "] is empty end can not be used");
            throw new ProposalByTypeCreationException("Generated proposal for voucher[" + voucherType.name() + "] from file [" + fileName + "] is empty end can not be used");
        }

        return new ArrayList<>(voucherSet);
    }


    public List<Voucher> generateProposalAllTypes(Map<VoucherType, String> voucherParams) throws ProposalCreationException {
        logger.log(Level.INFO, "ProposalCreator.generateProposalAllTypes-> called to create mixed voucher list for available voucher types");
        Iterator<VoucherType> voucherTypeIterator = new TreeSet<>(voucherParams.keySet()).iterator();
        logger.log(Level.INFO, "ProposalCreator.generateProposalAllTypes-> extracts iterator for received voucher types from voucherParams map");
        Set<Voucher> voucherProposalSet = new HashSet<>();
        logger.log(Level.INFO, "ProposalCreator.generateProposalAllTypes-> creates HashSet object to add proposalsByType for each requested voucherType");
        ProposalValidator proposalValidator = new ProposalValidator();
        while (voucherTypeIterator.hasNext()) {
            VoucherType localVoucherKey = voucherTypeIterator.next();
            try {
                voucherProposalSet.addAll(generateProposalByType(localVoucherKey, voucherParams.get(localVoucherKey)));
                logger.log(Level.INFO, "ProposalCreator.generateProposalAllTypes-> proposal for voucherType[" + localVoucherKey.name() + "] has been successfully generated from file [" + voucherParams.get(localVoucherKey) + "] and added to voucherProposal set");
            } catch (ProposalByTypeCreationException e) {
                logger.log(Level.INFO, "ProposalCreator.generateProposalAllTypes-> proposal for voucherType[" + localVoucherKey.name() + "] has not been generated from file [" + voucherParams.get(localVoucherKey) + "]", e.getCause());
            }
        }


        if (proposalValidator.validateIfVoucherProposalEmpty(new ArrayList<Voucher>(voucherProposalSet))) {
            logger.log(Level.WARN, "ProposalCreator.generateProposalAllTypes-> trows ProposalCreationException for for voucherTypes[" + voucherParams.keySet() + "] from files [" + voucherParams.values() + "] is empty end can not be used");
            throw new ProposalCreationException("Generated final proposal for voucherTypes[" + voucherParams.keySet() + "] from files [" + voucherParams.values() + "] is empty end can not be used");
        }
        logger.log(Level.INFO, "ProposalCreator.generateProposalAllTypes-> final proposal for voucherTypes[" + voucherParams.keySet() + "] has been successfully generated from files [" + voucherParams.values() + "]");

        return new ArrayList<>(voucherProposalSet);
    }
}
